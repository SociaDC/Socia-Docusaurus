"use strict";(self.webpackChunkproject_documentation=self.webpackChunkproject_documentation||[]).push([[555],{9852:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(4848),s=t(8453);const i={sidebar_position:1},o="IHPS (In House Project Standarts)",a={id:"ihps/ihps",title:"IHPS (In House Project Standarts)",description:"---",source:"@site/docs/ihps/ihps.md",sourceDirName:"ihps",slug:"/ihps/",permalink:"/docs/ihps/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ihps/ihps.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"132 - Branch Naming",permalink:"/docs/ihps/git/132"},next:{title:"300 - Meetings",permalink:"/docs/category/300---meetings"}},c={},d=[{value:"Standart",id:"standart",level:2},{value:"Unit registry",id:"unit-registry",level:3}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ihps-in-house-project-standarts",children:"IHPS (In House Project Standarts)"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Author : Philipp Cserich"}),"\n",(0,r.jsx)(n.p,{children:"Date : 18.10.2024"}),"\n",(0,r.jsx)(n.p,{children:"The IHPS standarts are built to represent common standarts used in the everyday work of every programmer in our organization.\nThey should always return some type of benefit for the projects workflows and new additions will be voted in or out at the next commonly occuring sprint meeting.\nIHPS or In House Project Standarts are therefore required to be beneficial in either standartization and understandability or creating faster response flows and minimzing workloads."}),"\n",(0,r.jsx)(n.h2,{id:"standart",children:"Standart"}),"\n",(0,r.jsx)(n.p,{children:"The organizational Standarts are procedurally built by using this exact versioning system :"}),"\n",(0,r.jsx)(n.p,{children:"IHPS-[Unit]-[ID]"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Unit x ID are both 3 Digit codes"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"IHPS-100-001"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'-> IHPS-110-001 (Git Commit convention with the index "1")'}),"\n",(0,r.jsx)(n.h3,{id:"unit-registry",children:"Unit registry"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"100 -> Git Conventions\n110 -> Commits\n120 -> Repository\n130 -> Branches\n140 -> Tickets\n200 -> Testing\n210 -> Unittests\n220 -> Propertytests\n230 -> Architecturetests\n...\n300 -> Meetings\n301 -> Structure\n302 -> Length\n...\n400 -> Personal\n...\n500 -> Documentation\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);